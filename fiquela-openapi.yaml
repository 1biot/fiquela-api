info:
  title: FiQueLa API
  version: 1.0.0
openapi: 3.0.3
servers:
  - url: http://localhost:6917
    description: Local server
  - url: https://fiquela.preved.to
    description: Online test server
tags:
  - name: Auth
    description: Authentication operations
  - name: Files
    description: File management operations
  - name: Query
    description: SQL-like query execution for files
components:
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
  headers:
    ApiVersionHeader:
      description: Version of the API that processed the request
      schema:
        type: string
        example: "v1"
  schemas:
    AuthRequest:
      type: object
      properties:
        user:
          type: string
          example: novak
        secret:
          type: string
          example: SuperSecret123!
      required:
        - user
        - secret
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
      required:
        - token
    UploadSchema:
      type: object
      properties:
        file:
          type: array
          items:
            type: string
            format: binary
      required:
        - file
    DownloadSchema:
      type: object
      properties:
        url:
          type: string
        name:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        encoding:
          type: string
          nullable: true
        delimiter:
          type: string
          nullable: true
        query:
          type: string
          nullable: true
      required:
        - url
    FileSchema:
      type: "object"
      properties:
        uuid:
          type: "string"
        name:
          type: "string"
        encoding:
          type: "string"
          nullable: true
        type:
          type: "string"
        size:
          type: "integer"
        delimiter:
          type: "string"
          nullable: true
        query:
          type: "string"
          nullable: true
        count:
          type: "integer"
        columns:
          type: "array"
          items:
            type: "object"
            properties:
              column:
                type: "string"
              types:
                type: "object"
                additionalProperties:
                  type: "number"
              totalRows:
                type: "integer"
              totalTypes:
                type: "integer"
              dominant:
                type: "string"
                nullable: true
              suspicious:
                type: "boolean"
              confidence:
                type: "number"
                format: "float"
              completeness:
                type: "number"
                format: "float"
              constant:
                type: "boolean"
              isEnum:
                type: "boolean"
              isUnique:
                type: "boolean"
            required:
              - "column"
              - "types"
              - "totalRows"
              - "totalTypes"
              - "dominant"
              - "suspicious"
              - "confidence"
              - "completeness"
              - "constant"
              - "isEnum"
              - "isUnique"
            additionalProperties: false
      additionalProperties: false
    FilesSchema:
      type: "array"
      items:
        $ref: '#/components/schemas/FileSchema'
    FileUpdateSchema:
      type: object
      properties:
        delimiter:
          type: string
          nullable: true
        encoding:
          type: string
          nullable: true
        query:
          type: string
          nullable: true
    QueryRequestSchema:
      type: object
      properties:
        query:
          type: string
        file:
          type: string
          nullable: true
        limit:
          type: integer
          nullable: true
          maximum: 1000
        page:
          type: integer
          nullable: true
        refresh:
          type: boolean
          nullable: true
          default: false
      required:
        - query
    QueryResultSchema:
      type: object
      properties:
        query:
          type: string
        file:
          type: string
        hash:
          type: string
        data:
          type: array
          items:
            type: object
            additionalProperties: true
        elapsed:
          type: number
        pagination:
          $ref: '#/components/schemas/PaginationSchema'
      required:
        - query
        - file
        - hash
        - data
        - elapsed
        - pagination
    PaginationSchema:
      type: object
      properties:
        page:
          type: integer
        pageCount:
          type: integer
        itemCount:
          type: integer
        itemsPerPage:
          type: integer
        offset:
          type: integer
paths:
  /api/auth/login:
    post:
      security: []
      tags:
        - Auth
      summary: Login and get token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Successful login
          headers:
            X-Api-Version:
              $ref: '#/components/headers/ApiVersionHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
  /api/auth/revoke:
    post:
      security: []
      tags:
        - Auth
      summary: Revoke token and get a new one
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Token revoked, new one returned
          headers:
            X-Api-Version:
              $ref: '#/components/headers/ApiVersionHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  revoked:
                    type: string
                    example: eyJhbGciOiJIUz...
                required:
                  - revoked
        '401':
          description: Invalid credentials
  /api/v1/files:
    get:
      security:
        - bearerAuth: []
      tags:
        - Files
      responses:
        '200':
          description: Successful response
          headers:
            X-Api-Version:
              $ref: '#/components/headers/ApiVersionHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesSchema'
      summary: List of files
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Files
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadSchema'
            example:
              url: "https://example.com/file.xml"
              name: "file.xml"
              type: "xml"
              encoding: "utf-8"
              delimiter: null
              query: "channel.items"
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadSchema'
      responses:
        '200':
          description: Successful response
          headers:
            X-Api-Version:
              $ref: '#/components/headers/ApiVersionHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  schema:
                    $ref: '#/components/schemas/FileSchema'
              example:
                schema:
                  uuid: "12345678-1234-5678-1234-123456789012"
                  name: "example.xml"
                  encoding: "utf-8"
                  type: "xml"
                  size: 123456
                  delimiter: null
                  query: "channel.items"
                  count: 100
                  columns:
                    - column: "title"
                      types:
                        string: 23
                        empty-string: 12
                      totalRows: 35
                      totalTypes: 2
                      dominant: "string"
                      suspicious: false
                      confidence: 0.95
                      completeness: 0.98
                      constant: false
                      isEnum: false
                      isUnique: true
                    - column: "images"
                      types:
                        array: 234
                    - column: "price"
                      types:
                        int: 98
                        double: 12
                      totalRows: 110
                      totalTypes: 2
                      dominant: "int"
                      suspicious: false
                      confidence: 0.95
                      completeness: 0.98
                      constant: false
                      isEnum: false
                      isUnique: false
      summary: Upload file from remote URL or local file
  /api/v1/files/{uuid}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Files
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          headers:
            X-Api-Version:
              $ref: '#/components/headers/ApiVersionHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileSchema'
              example:
                uuid: "12345678-1234-5678-1234-123456789012"
                name: "example.xml"
                encoding: "utf-8"
                type: "xml"
                size: 123456
                delimiter: null
                query: "channel.items"
                count: 100
                columns:
                  - column: "title"
                    types:
                      string: 23
                      empty-string: 12
                    totalRows: 35
                    totalTypes: 2
                    dominant: "string"
                    suspicious: false
                    confidence: 0.95
                    completeness: 0.98
                    constant: false
                    isEnum: false
                  - column: "images"
                    types:
                      array: 234
                  - column: "price"
                    types:
                      int: 98
                      double: 12
                    totalRows: 110
                    totalTypes: 2
                    dominant: "int"
                    suspicious: false
                    confidence: 0.95
                    completeness: 0.98
                    constant: false
                    isEnum: false
      summary: Get file schema or info
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Files
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileUpdateSchema'
            example:
              delimiter: null
              encoding: "utf-8"
              query: "channel.items"
        required: true
      responses:
        '200':
          description: Successful response
          headers:
            X-Api-Version:
              $ref: '#/components/headers/ApiVersionHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  schema:
                    $ref: '#/components/schemas/FileSchema'
              example:
                schema:
                  uuid: "12345678-1234-5678-1234-123456789012"
                  name: "example.xml"
                  encoding: "utf-8"
                  type: "xml"
                  size: 123456
                  delimiter: null
                  query: "channel.items"
                  count: 100
                  columns:
                    - column: "title"
                      types:
                        string: 23
                        empty-string: 12
                    - column: "images"
                      types:
                        array: 234
                    - column: "price"
                      types:
                        int: 98
                        double: 12
      summary: Generate query-based export for file
    delete:
      security:
        - bearerAuth: [ ]
      tags:
        - Files
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          headers:
            X-Api-Version:
              $ref: '#/components/headers/ApiVersionHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: File deleted
              example:
                message: "File deleted successfully"
      summary: Generate query-based export for file
  /api/v1/query:
    post:
      security:
        - bearerAuth: [ ]
      summary: Execute SQL-like queries over the files and get results
      tags:
        - Query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequestSchema'
            examples:
              Without file:
                value:
                  query: "SELECT * FROM [xml](file.xml).channel.item WHERE code = '1234'"
              With file:
                value:
                  query: "SELECT * FROM channel.item WHERE price < 250"
                  file: "file.xml"
              With limit and page:
                value:
                  query: "SELECT * FROM channel.item WHERE price < 250"
                  file: "file.xml"
                  limit: 10
                  page: 1
        required: true
      responses:
        '200':
          description: Successful response
          headers:
            X-Api-Version:
              $ref: '#/components/headers/ApiVersionHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResultSchema'
              example:
                query: "SELECT * FROM [xml](file.xml).channel.item WHERE code = '1234'"
                file: "file.xml"
                hash: "ef0b589d95c65a6a4f7c075c59e1a3aa"
                data:
                  - title: "Item 1"
                    price: 100.0
                  - title: "Item 2"
                    price: 200.0
                elapsed: 0.123
                pagination:
                  page: 1
                  pageCount: 10
                  itemCount: 100
                  itemsPerPage: 10
                  offset: 0
  /api/v1/export/{hash}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Export
      parameters:
        - in: path
          name: hash
          required: true
          schema:
            type: string
        - in: query
          name: format
          required: false
          schema:
            type: string
            enum:
              - csv
              - tsv
              - json
      responses:
        '200':
          description: Successful response
          headers:
            X-Api-Version:
              $ref: '#/components/headers/ApiVersionHeader'
      summary: Export a file in specific format
  /api/v1/history:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - History
      responses:
        '200':
          description: Successful response
          headers:
            X-Api-Version:
              $ref: '#/components/headers/ApiVersionHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    created_at:
                      type: string
                      format: date-time
                      description: "Timestamp of the query execution"
                    query:
                      type: string
                      description: "SQL-like query inserted"
                    runs:
                      type: string
                      description: "SQL-like query executed"
              example:
                - runs: "SELECT * FROM [xml](file.xml).channel.item WHERE code = '1234'"
                  query: "select * from (file.xml).channel.item where code = '1234'"
                  created_at: "2023-10-01T12:00:00Z"
                - runs: "SELECT * FROM [xml](file.xml).channel.item WHERE price < 250"
                  query: "select * from channel.item where price < 250"
                  created_at: "2023-10-01T12:01:00Z"
      summary: List of file processing history
  /api/v1/history/{date}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - History
      parameters:
        - in: path
          name: date
          required: true
          schema:
            type: string
            format: date
            example: "2025-04-08"
      responses:
        '200':
          description: Successful response
          headers:
            X-Api-Version:
              $ref: '#/components/headers/ApiVersionHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    created_at:
                      type: string
                      format: date-time
                      description: "Timestamp of the query execution"
                    query:
                      type: string
                      description: "SQL-like query inserted"
                    runs:
                      type: string
                      description: "SQL-like query executed"
              example:
                - runs: "SELECT * FROM [xml](file.xml).channel.item WHERE code = '1234'"
                  query: "select * from (file.xml).channel.item where code = '1234'"
                  created_at: "2023-10-01T12:00:00Z"
                - runs: "SELECT * FROM [xml](file.xml).channel.item WHERE price < 250"
                  query: "select * from channel.item where price < 250"
                  created_at: "2023-10-01T12:01:00Z"
      summary: List of file processing history
  /api/v1/ping:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Health
      responses:
        '200':
          description: Successful response
          headers:
            X-Api-Version:
              $ref: '#/components/headers/ApiVersionHeader'
          content:
            text/plain:
              example: "pong"
      summary: Check if the API is running
